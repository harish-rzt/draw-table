{"ast":null,"code":"import _toConsumableArray from \"/Users/rzt/Github/draw-table/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Users/rzt/Github/draw-table/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nexport var tableData = {\n  id: 't1',\n  confidenceScore: 50,\n  tag: 'Bank details',\n  coordinates: {\n    x: 0,\n    y: 0,\n    width: 380,\n    height: 190\n  },\n  styles: {\n    stroke: 'red',\n    fill: 'transparent'\n  },\n  type: 'table',\n  tableCols: [{\n    id: 'col1',\n    coordinates: {\n      x: 5,\n      y: 5,\n      width: 90,\n      height: 180\n    },\n    styles: {\n      stroke: 'blue',\n      fill: 'transparent'\n    },\n    type: 'col'\n  }, {\n    id: 'col2',\n    coordinates: {\n      x: 105,\n      y: 5,\n      width: 90,\n      height: 180\n    },\n    styles: {\n      stroke: 'blue',\n      fill: 'transparent'\n    },\n    type: 'col'\n  }, {\n    id: 'col3',\n    coordinates: {\n      x: 205,\n      y: 5,\n      width: 90,\n      height: 180\n    },\n    styles: {\n      stroke: 'blue',\n      fill: 'transparent'\n    },\n    type: 'col'\n  }, {\n    id: 'col4',\n    coordinates: {\n      x: 305,\n      y: 5,\n      width: 90,\n      height: 180\n    },\n    styles: {\n      stroke: 'blue',\n      fill: 'transparent'\n    },\n    type: 'col'\n  }],\n  tableRows: [{\n    id: 'row1',\n    isHeader: true,\n    coordinates: {\n      x: 5,\n      y: 5,\n      width: 365,\n      height: 45\n    },\n    styles: {\n      stroke: 'green',\n      fill: 'transparent'\n    },\n    type: 'row',\n    cells: [{\n      id: 'cell11',\n      isNull: false,\n      colSpan: 1,\n      rowSpan: 1,\n      value: 'c-11',\n      coordinates: {\n        x: 10,\n        y: 10,\n        width: 85,\n        height: 35\n      },\n      styles: {\n        stroke: 'yellow',\n        fill: '#ccc'\n      },\n      type: 'cell'\n    }, {\n      id: 'cell12',\n      isNull: false,\n      colSpan: 1,\n      rowSpan: 1,\n      value: 'c-12',\n      coordinates: {\n        x: 100,\n        y: 10,\n        width: 85,\n        height: 35\n      },\n      styles: {\n        stroke: 'yellow',\n        fill: '#ccc'\n      },\n      type: 'cell'\n    }, {\n      id: 'cell13',\n      isNull: false,\n      colSpan: 1,\n      rowSpan: 1,\n      value: 'c-11',\n      coordinates: {\n        x: 190,\n        y: 10,\n        width: 85,\n        height: 35\n      },\n      styles: {\n        stroke: 'yellow',\n        fill: '#ccc'\n      },\n      type: 'cell'\n    }, {\n      id: 'cell14',\n      isNull: false,\n      colSpan: 1,\n      rowSpan: 1,\n      value: 'c-12',\n      coordinates: {\n        x: 280,\n        y: 10,\n        width: 85,\n        height: 35\n      },\n      styles: {\n        stroke: 'yellow',\n        fill: '#ccc'\n      },\n      type: 'cell'\n    }]\n  }, {\n    id: 'row2',\n    isHeader: true,\n    coordinates: {\n      x: 5,\n      y: 55,\n      width: 365,\n      height: 45\n    },\n    styles: {\n      stroke: 'green',\n      fill: 'transparent'\n    },\n    type: 'row',\n    cells: [{\n      id: 'cell21',\n      isNull: false,\n      colSpan: 1,\n      rowSpan: 1,\n      value: 'c-21',\n      coordinates: {\n        x: 10,\n        y: 55,\n        width: 85,\n        height: 35\n      },\n      styles: {\n        stroke: 'yellow',\n        fill: '#ccc'\n      },\n      type: 'cell'\n    }, {\n      id: 'cell22',\n      isNull: false,\n      colSpan: 2,\n      rowSpan: 2,\n      value: 'c-22',\n      coordinates: {\n        x: 100,\n        y: 55,\n        width: 85,\n        height: 35\n      },\n      styles: {\n        stroke: 'yellow',\n        fill: '#ccc'\n      },\n      type: 'cell',\n      merged: true\n    }, {\n      id: 'cell23',\n      isNull: false,\n      colSpan: 1,\n      rowSpan: 1,\n      value: 'c-21',\n      coordinates: {\n        x: 190,\n        y: 55,\n        width: 85,\n        height: 35\n      },\n      styles: {\n        stroke: 'yellow',\n        fill: '#ccc'\n      },\n      type: 'cell',\n      merged: true\n    }, {\n      id: 'cell24',\n      isNull: false,\n      colSpan: 1,\n      rowSpan: 1,\n      value: 'c-22',\n      coordinates: {\n        x: 280,\n        y: 55,\n        width: 85,\n        height: 35\n      },\n      styles: {\n        stroke: 'yellow',\n        fill: '#ccc'\n      },\n      type: 'cell'\n    }]\n  }, {\n    id: 'row3',\n    isHeader: true,\n    coordinates: {\n      x: 5,\n      y: 105,\n      width: 365,\n      height: 45\n    },\n    styles: {\n      stroke: 'green',\n      fill: 'transparent'\n    },\n    type: 'row',\n    cells: [{\n      id: 'cell31',\n      isNull: false,\n      colSpan: 1,\n      rowSpan: 1,\n      value: 'c-21',\n      coordinates: {\n        x: 10,\n        y: 100,\n        width: 85,\n        height: 35\n      },\n      styles: {\n        stroke: 'yellow',\n        fill: '#ccc'\n      },\n      type: 'cell'\n    }, {\n      id: 'cell32',\n      isNull: false,\n      colSpan: 1,\n      rowSpan: 1,\n      value: 'c-22',\n      coordinates: {\n        x: 100,\n        y: 100,\n        width: 85,\n        height: 35\n      },\n      styles: {\n        stroke: 'yellow',\n        fill: '#ccc'\n      },\n      type: 'cell',\n      merged: true\n    }, {\n      id: 'cell33',\n      isNull: false,\n      colSpan: 1,\n      rowSpan: 1,\n      value: 'c-21',\n      coordinates: {\n        x: 190,\n        y: 100,\n        width: 85,\n        height: 35\n      },\n      styles: {\n        stroke: 'yellow',\n        fill: '#ccc'\n      },\n      type: 'cell',\n      merged: true\n    }, {\n      id: 'cell34',\n      isNull: false,\n      colSpan: 1,\n      rowSpan: 1,\n      value: 'c-22',\n      coordinates: {\n        x: 280,\n        y: 100,\n        width: 85,\n        height: 35\n      },\n      styles: {\n        stroke: 'yellow',\n        fill: '#ccc'\n      },\n      type: 'cell'\n    }]\n  }, {\n    id: 'row4',\n    isHeader: true,\n    coordinates: {\n      x: 5,\n      y: 155,\n      width: 365,\n      height: 45\n    },\n    styles: {\n      stroke: 'green',\n      fill: 'transparent'\n    },\n    type: 'row',\n    cells: [{\n      id: 'cell41',\n      isNull: false,\n      colSpan: 1,\n      rowSpan: 1,\n      value: 'c-21',\n      coordinates: {\n        x: 10,\n        y: 145,\n        width: 85,\n        height: 35\n      },\n      styles: {\n        stroke: 'yellow',\n        fill: '#ccc'\n      },\n      type: 'cell'\n    }, {\n      id: 'cell42',\n      isNull: false,\n      colSpan: 1,\n      rowSpan: 1,\n      value: 'c-22',\n      coordinates: {\n        x: 100,\n        y: 145,\n        width: 85,\n        height: 35\n      },\n      styles: {\n        stroke: 'yellow',\n        fill: '#ccc'\n      },\n      type: 'cell'\n    }, {\n      id: 'cell43',\n      isNull: false,\n      colSpan: 1,\n      rowSpan: 1,\n      value: 'c-21',\n      coordinates: {\n        x: 190,\n        y: 145,\n        width: 85,\n        height: 35\n      },\n      styles: {\n        stroke: 'yellow',\n        fill: '#ccc'\n      },\n      type: 'cell'\n    }, {\n      id: 'cell44',\n      isNull: false,\n      colSpan: 1,\n      rowSpan: 1,\n      value: 'c-22',\n      coordinates: {\n        x: 280,\n        y: 145,\n        width: 85,\n        height: 35\n      },\n      styles: {\n        stroke: 'yellow',\n        fill: '#ccc'\n      },\n      type: 'cell'\n    }]\n  }]\n};\nexport var getTableCords = function getTableCords(data) {\n  return [_objectSpread({}, data.coordinates, data.styles, {\n    type: data.type,\n    id: data.id\n  })];\n};\nexport var getTableRowCellCords = function getTableRowCellCords(data) {\n  return data.tableRows.reduce(function (acc, cord, rowIndex) {\n    acc.tableRowCords.push(_objectSpread({}, cord.coordinates, cord.styles, {\n      type: cord.type,\n      id: cord.id,\n      rowIndex: rowIndex\n    }));\n    var cells = cord.cells.map(function (cell, columnIndex) {\n      return _objectSpread({}, cell.coordinates, cell.styles, {\n        type: cell.type,\n        id: cell.id,\n        rowIndex: rowIndex,\n        columnIndex: columnIndex,\n        merged: cell.merged,\n        colSpan: cell.colSpan,\n        rowSpan: cell.rowSpan\n      });\n    });\n    acc.tableCellCords = [].concat(_toConsumableArray(acc.tableCellCords), _toConsumableArray(cells));\n    return acc;\n  }, {\n    tableRowCords: [],\n    tableCellCords: []\n  });\n};\nexport var getTableColCords = function getTableColCords(data) {\n  return data.tableCols.map(function (col, columnIndex) {\n    return _objectSpread({}, col.coordinates, col.styles, {\n      type: col.type,\n      id: col.id,\n      columnIndex: columnIndex\n    });\n  });\n};\nexport var generateNewTable = function generateNewTable(_ref) {\n  var x = _ref.x,\n      y = _ref.y,\n      width = _ref.width,\n      height = _ref.height;\n  return {\n    id: 't1',\n    confidenceScore: 50,\n    tag: 'Bank details',\n    coordinates: {\n      x: x,\n      y: y,\n      width: width,\n      height: height\n    },\n    styles: {\n      stroke: 'red',\n      fill: 'transparent'\n    },\n    type: 'table',\n    tableCols: [{\n      id: 'col1',\n      coordinates: {\n        x: x + 5,\n        y: y + 5,\n        width: width - 10,\n        height: height - 10\n      },\n      styles: {\n        stroke: 'blue',\n        fill: 'transparent'\n      },\n      type: 'col'\n    }],\n    tableRows: [{\n      id: 'row1',\n      isHeader: true,\n      coordinates: {\n        x: x + 5,\n        y: y + 5,\n        width: width - 10,\n        height: height - 10\n      },\n      styles: {\n        stroke: 'green',\n        fill: 'transparent'\n      },\n      type: 'row',\n      cells: [{\n        id: 'cell11',\n        isNull: false,\n        colSpan: 1,\n        rowSpan: 1,\n        value: 'c-11',\n        coordinates: {\n          x: x + 5,\n          y: y + 5,\n          width: width - 10,\n          height: height - 10\n        },\n        styles: {\n          stroke: 'yellow',\n          fill: '#ccc'\n        },\n        type: 'cell'\n      }]\n    }]\n  };\n};\nexport var generateNewTableRow = function generateNewTableRow(_ref2) {\n  var _ref2$id = _ref2.id,\n      id = _ref2$id === void 0 ? 'x' : _ref2$id,\n      _ref2$isHeader = _ref2.isHeader,\n      isHeader = _ref2$isHeader === void 0 ? false : _ref2$isHeader,\n      cords = _ref2.cords,\n      _ref2$styles = _ref2.styles,\n      styles = _ref2$styles === void 0 ? {} : _ref2$styles,\n      cells = _ref2.cells;\n  return {\n    id: id,\n    isHeader: isHeader,\n    coordinates: {\n      x: cords.x,\n      y: cords.y,\n      width: cords.width,\n      height: cords.height\n    },\n    styles: _objectSpread({\n      stroke: 'green',\n      fill: 'transparent'\n    }, styles),\n    type: 'row',\n    cells: [{\n      id: 'cell11',\n      isNull: false,\n      colSpan: 1,\n      rowSpan: 1,\n      value: 'c-11',\n      coordinates: {\n        x: 5,\n        y: 5,\n        width: 10,\n        height: 10\n      },\n      styles: {\n        stroke: 'yellow',\n        fill: '#ccc'\n      },\n      type: 'cell'\n    }]\n  };\n};","map":{"version":3,"sources":["/Users/rzt/Github/draw-table/src/components/SvgUtils/tableData.js"],"names":["tableData","id","confidenceScore","tag","coordinates","x","y","width","height","styles","stroke","fill","type","tableCols","tableRows","isHeader","cells","isNull","colSpan","rowSpan","value","merged","getTableCords","data","getTableRowCellCords","reduce","acc","cord","rowIndex","tableRowCords","push","map","cell","columnIndex","tableCellCords","getTableColCords","col","generateNewTable","generateNewTableRow","cords"],"mappings":";;AAAA,OAAO,IAAMA,SAAS,GAAG;AACvBC,EAAAA,EAAE,EAAE,IADmB;AAEvBC,EAAAA,eAAe,EAAE,EAFM;AAGvBC,EAAAA,GAAG,EAAE,cAHkB;AAIvBC,EAAAA,WAAW,EAAE;AAAEC,IAAAA,CAAC,EAAE,CAAL;AAAQC,IAAAA,CAAC,EAAE,CAAX;AAAcC,IAAAA,KAAK,EAAE,GAArB;AAA0BC,IAAAA,MAAM,EAAE;AAAlC,GAJU;AAKvBC,EAAAA,MAAM,EAAE;AAAEC,IAAAA,MAAM,EAAE,KAAV;AAAiBC,IAAAA,IAAI,EAAE;AAAvB,GALe;AAMvBC,EAAAA,IAAI,EAAE,OANiB;AAOvBC,EAAAA,SAAS,EAAE,CACT;AACEZ,IAAAA,EAAE,EAAE,MADN;AAEEG,IAAAA,WAAW,EAAE;AAAEC,MAAAA,CAAC,EAAE,CAAL;AAAQC,MAAAA,CAAC,EAAE,CAAX;AAAcC,MAAAA,KAAK,EAAE,EAArB;AAAyBC,MAAAA,MAAM,EAAE;AAAjC,KAFf;AAGEC,IAAAA,MAAM,EAAE;AAAEC,MAAAA,MAAM,EAAE,MAAV;AAAkBC,MAAAA,IAAI,EAAE;AAAxB,KAHV;AAIEC,IAAAA,IAAI,EAAE;AAJR,GADS,EAOT;AACEX,IAAAA,EAAE,EAAE,MADN;AAEEG,IAAAA,WAAW,EAAE;AAAEC,MAAAA,CAAC,EAAE,GAAL;AAAUC,MAAAA,CAAC,EAAE,CAAb;AAAgBC,MAAAA,KAAK,EAAE,EAAvB;AAA2BC,MAAAA,MAAM,EAAE;AAAnC,KAFf;AAGEC,IAAAA,MAAM,EAAE;AAAEC,MAAAA,MAAM,EAAE,MAAV;AAAkBC,MAAAA,IAAI,EAAE;AAAxB,KAHV;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAPS,EAaT;AACEX,IAAAA,EAAE,EAAE,MADN;AAEEG,IAAAA,WAAW,EAAE;AAAEC,MAAAA,CAAC,EAAE,GAAL;AAAUC,MAAAA,CAAC,EAAE,CAAb;AAAgBC,MAAAA,KAAK,EAAE,EAAvB;AAA2BC,MAAAA,MAAM,EAAE;AAAnC,KAFf;AAGEC,IAAAA,MAAM,EAAE;AAAEC,MAAAA,MAAM,EAAE,MAAV;AAAkBC,MAAAA,IAAI,EAAE;AAAxB,KAHV;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAbS,EAmBT;AACEX,IAAAA,EAAE,EAAE,MADN;AAEEG,IAAAA,WAAW,EAAE;AAAEC,MAAAA,CAAC,EAAE,GAAL;AAAUC,MAAAA,CAAC,EAAE,CAAb;AAAgBC,MAAAA,KAAK,EAAE,EAAvB;AAA2BC,MAAAA,MAAM,EAAE;AAAnC,KAFf;AAGEC,IAAAA,MAAM,EAAE;AAAEC,MAAAA,MAAM,EAAE,MAAV;AAAkBC,MAAAA,IAAI,EAAE;AAAxB,KAHV;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAnBS,CAPY;AAiCvBE,EAAAA,SAAS,EAAE,CACT;AACEb,IAAAA,EAAE,EAAE,MADN;AAEEc,IAAAA,QAAQ,EAAE,IAFZ;AAGEX,IAAAA,WAAW,EAAE;AAAEC,MAAAA,CAAC,EAAE,CAAL;AAAQC,MAAAA,CAAC,EAAE,CAAX;AAAcC,MAAAA,KAAK,EAAE,GAArB;AAA0BC,MAAAA,MAAM,EAAE;AAAlC,KAHf;AAIEC,IAAAA,MAAM,EAAE;AAAEC,MAAAA,MAAM,EAAE,OAAV;AAAmBC,MAAAA,IAAI,EAAE;AAAzB,KAJV;AAKEC,IAAAA,IAAI,EAAE,KALR;AAMEI,IAAAA,KAAK,EAAE,CACL;AACEf,MAAAA,EAAE,EAAE,QADN;AAEEgB,MAAAA,MAAM,EAAE,KAFV;AAGEC,MAAAA,OAAO,EAAE,CAHX;AAIEC,MAAAA,OAAO,EAAE,CAJX;AAKEC,MAAAA,KAAK,EAAE,MALT;AAMEhB,MAAAA,WAAW,EAAE;AAAEC,QAAAA,CAAC,EAAE,EAAL;AAASC,QAAAA,CAAC,EAAE,EAAZ;AAAgBC,QAAAA,KAAK,EAAE,EAAvB;AAA2BC,QAAAA,MAAM,EAAE;AAAnC,OANf;AAOEC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,MAAM,EAAE,QAAV;AAAoBC,QAAAA,IAAI,EAAE;AAA1B,OAPV;AAQEC,MAAAA,IAAI,EAAE;AARR,KADK,EAWL;AACEX,MAAAA,EAAE,EAAE,QADN;AAEEgB,MAAAA,MAAM,EAAE,KAFV;AAGEC,MAAAA,OAAO,EAAE,CAHX;AAIEC,MAAAA,OAAO,EAAE,CAJX;AAKEC,MAAAA,KAAK,EAAE,MALT;AAMEhB,MAAAA,WAAW,EAAE;AAAEC,QAAAA,CAAC,EAAE,GAAL;AAAUC,QAAAA,CAAC,EAAE,EAAb;AAAiBC,QAAAA,KAAK,EAAE,EAAxB;AAA4BC,QAAAA,MAAM,EAAE;AAApC,OANf;AAOEC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,MAAM,EAAE,QAAV;AAAoBC,QAAAA,IAAI,EAAE;AAA1B,OAPV;AAQEC,MAAAA,IAAI,EAAE;AARR,KAXK,EAoBF;AACDX,MAAAA,EAAE,EAAE,QADH;AAEDgB,MAAAA,MAAM,EAAE,KAFP;AAGDC,MAAAA,OAAO,EAAE,CAHR;AAIDC,MAAAA,OAAO,EAAE,CAJR;AAKDC,MAAAA,KAAK,EAAE,MALN;AAMDhB,MAAAA,WAAW,EAAE;AAAEC,QAAAA,CAAC,EAAE,GAAL;AAAUC,QAAAA,CAAC,EAAE,EAAb;AAAiBC,QAAAA,KAAK,EAAE,EAAxB;AAA4BC,QAAAA,MAAM,EAAE;AAApC,OANZ;AAODC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,MAAM,EAAE,QAAV;AAAoBC,QAAAA,IAAI,EAAE;AAA1B,OAPP;AAQDC,MAAAA,IAAI,EAAE;AARL,KApBE,EA6BF;AACDX,MAAAA,EAAE,EAAE,QADH;AAEDgB,MAAAA,MAAM,EAAE,KAFP;AAGDC,MAAAA,OAAO,EAAE,CAHR;AAIDC,MAAAA,OAAO,EAAE,CAJR;AAKDC,MAAAA,KAAK,EAAE,MALN;AAMDhB,MAAAA,WAAW,EAAE;AAAEC,QAAAA,CAAC,EAAE,GAAL;AAAUC,QAAAA,CAAC,EAAE,EAAb;AAAiBC,QAAAA,KAAK,EAAE,EAAxB;AAA4BC,QAAAA,MAAM,EAAE;AAApC,OANZ;AAODC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,MAAM,EAAE,QAAV;AAAoBC,QAAAA,IAAI,EAAE;AAA1B,OAPP;AAQDC,MAAAA,IAAI,EAAE;AARL,KA7BE;AANT,GADS,EAgDT;AACEX,IAAAA,EAAE,EAAE,MADN;AAEEc,IAAAA,QAAQ,EAAE,IAFZ;AAGEX,IAAAA,WAAW,EAAE;AAAEC,MAAAA,CAAC,EAAE,CAAL;AAAQC,MAAAA,CAAC,EAAE,EAAX;AAAeC,MAAAA,KAAK,EAAE,GAAtB;AAA2BC,MAAAA,MAAM,EAAE;AAAnC,KAHf;AAIEC,IAAAA,MAAM,EAAE;AAAEC,MAAAA,MAAM,EAAE,OAAV;AAAmBC,MAAAA,IAAI,EAAE;AAAzB,KAJV;AAKEC,IAAAA,IAAI,EAAE,KALR;AAMEI,IAAAA,KAAK,EAAE,CACL;AACEf,MAAAA,EAAE,EAAE,QADN;AAEEgB,MAAAA,MAAM,EAAE,KAFV;AAGEC,MAAAA,OAAO,EAAE,CAHX;AAIEC,MAAAA,OAAO,EAAE,CAJX;AAKEC,MAAAA,KAAK,EAAE,MALT;AAMEhB,MAAAA,WAAW,EAAE;AAAEC,QAAAA,CAAC,EAAE,EAAL;AAASC,QAAAA,CAAC,EAAE,EAAZ;AAAgBC,QAAAA,KAAK,EAAE,EAAvB;AAA2BC,QAAAA,MAAM,EAAE;AAAnC,OANf;AAOEC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,MAAM,EAAE,QAAV;AAAoBC,QAAAA,IAAI,EAAE;AAA1B,OAPV;AAQEC,MAAAA,IAAI,EAAE;AARR,KADK,EAWL;AACEX,MAAAA,EAAE,EAAE,QADN;AAEEgB,MAAAA,MAAM,EAAE,KAFV;AAGEC,MAAAA,OAAO,EAAE,CAHX;AAIEC,MAAAA,OAAO,EAAE,CAJX;AAKEC,MAAAA,KAAK,EAAE,MALT;AAMEhB,MAAAA,WAAW,EAAE;AAAEC,QAAAA,CAAC,EAAE,GAAL;AAAUC,QAAAA,CAAC,EAAE,EAAb;AAAiBC,QAAAA,KAAK,EAAE,EAAxB;AAA4BC,QAAAA,MAAM,EAAE;AAApC,OANf;AAOEC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,MAAM,EAAE,QAAV;AAAoBC,QAAAA,IAAI,EAAE;AAA1B,OAPV;AAQEC,MAAAA,IAAI,EAAE,MARR;AASES,MAAAA,MAAM,EAAE;AATV,KAXK,EAqBF;AACDpB,MAAAA,EAAE,EAAE,QADH;AAEDgB,MAAAA,MAAM,EAAE,KAFP;AAGDC,MAAAA,OAAO,EAAE,CAHR;AAIDC,MAAAA,OAAO,EAAE,CAJR;AAKDC,MAAAA,KAAK,EAAE,MALN;AAMDhB,MAAAA,WAAW,EAAE;AAAEC,QAAAA,CAAC,EAAE,GAAL;AAAUC,QAAAA,CAAC,EAAE,EAAb;AAAiBC,QAAAA,KAAK,EAAE,EAAxB;AAA4BC,QAAAA,MAAM,EAAE;AAApC,OANZ;AAODC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,MAAM,EAAE,QAAV;AAAoBC,QAAAA,IAAI,EAAE;AAA1B,OAPP;AAQDC,MAAAA,IAAI,EAAE,MARL;AASDS,MAAAA,MAAM,EAAE;AATP,KArBE,EAgCL;AACEpB,MAAAA,EAAE,EAAE,QADN;AAEEgB,MAAAA,MAAM,EAAE,KAFV;AAGEC,MAAAA,OAAO,EAAE,CAHX;AAIEC,MAAAA,OAAO,EAAE,CAJX;AAKEC,MAAAA,KAAK,EAAE,MALT;AAMEhB,MAAAA,WAAW,EAAE;AAAEC,QAAAA,CAAC,EAAE,GAAL;AAAUC,QAAAA,CAAC,EAAE,EAAb;AAAiBC,QAAAA,KAAK,EAAE,EAAxB;AAA4BC,QAAAA,MAAM,EAAE;AAApC,OANf;AAOEC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,MAAM,EAAE,QAAV;AAAoBC,QAAAA,IAAI,EAAE;AAA1B,OAPV;AAQEC,MAAAA,IAAI,EAAE;AARR,KAhCK;AANT,GAhDS,EAkGT;AACEX,IAAAA,EAAE,EAAE,MADN;AAEEc,IAAAA,QAAQ,EAAE,IAFZ;AAGEX,IAAAA,WAAW,EAAE;AAAEC,MAAAA,CAAC,EAAE,CAAL;AAAQC,MAAAA,CAAC,EAAE,GAAX;AAAgBC,MAAAA,KAAK,EAAE,GAAvB;AAA4BC,MAAAA,MAAM,EAAE;AAApC,KAHf;AAIEC,IAAAA,MAAM,EAAE;AAAEC,MAAAA,MAAM,EAAE,OAAV;AAAmBC,MAAAA,IAAI,EAAE;AAAzB,KAJV;AAKEC,IAAAA,IAAI,EAAE,KALR;AAMEI,IAAAA,KAAK,EAAE,CACL;AACEf,MAAAA,EAAE,EAAE,QADN;AAEEgB,MAAAA,MAAM,EAAE,KAFV;AAGEC,MAAAA,OAAO,EAAE,CAHX;AAIEC,MAAAA,OAAO,EAAE,CAJX;AAKEC,MAAAA,KAAK,EAAE,MALT;AAMEhB,MAAAA,WAAW,EAAE;AAAEC,QAAAA,CAAC,EAAE,EAAL;AAASC,QAAAA,CAAC,EAAE,GAAZ;AAAiBC,QAAAA,KAAK,EAAE,EAAxB;AAA4BC,QAAAA,MAAM,EAAE;AAApC,OANf;AAOEC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,MAAM,EAAE,QAAV;AAAoBC,QAAAA,IAAI,EAAE;AAA1B,OAPV;AAQEC,MAAAA,IAAI,EAAE;AARR,KADK,EAWL;AACEX,MAAAA,EAAE,EAAE,QADN;AAEEgB,MAAAA,MAAM,EAAE,KAFV;AAGEC,MAAAA,OAAO,EAAE,CAHX;AAIEC,MAAAA,OAAO,EAAE,CAJX;AAKEC,MAAAA,KAAK,EAAE,MALT;AAMEhB,MAAAA,WAAW,EAAE;AAAEC,QAAAA,CAAC,EAAE,GAAL;AAAUC,QAAAA,CAAC,EAAE,GAAb;AAAkBC,QAAAA,KAAK,EAAE,EAAzB;AAA6BC,QAAAA,MAAM,EAAE;AAArC,OANf;AAOEC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,MAAM,EAAE,QAAV;AAAoBC,QAAAA,IAAI,EAAE;AAA1B,OAPV;AAQEC,MAAAA,IAAI,EAAE,MARR;AASES,MAAAA,MAAM,EAAE;AATV,KAXK,EAqBF;AACDpB,MAAAA,EAAE,EAAE,QADH;AAEDgB,MAAAA,MAAM,EAAE,KAFP;AAGDC,MAAAA,OAAO,EAAE,CAHR;AAIDC,MAAAA,OAAO,EAAE,CAJR;AAKDC,MAAAA,KAAK,EAAE,MALN;AAMDhB,MAAAA,WAAW,EAAE;AAAEC,QAAAA,CAAC,EAAE,GAAL;AAAUC,QAAAA,CAAC,EAAE,GAAb;AAAkBC,QAAAA,KAAK,EAAE,EAAzB;AAA6BC,QAAAA,MAAM,EAAE;AAArC,OANZ;AAODC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,MAAM,EAAE,QAAV;AAAoBC,QAAAA,IAAI,EAAE;AAA1B,OAPP;AAQDC,MAAAA,IAAI,EAAE,MARL;AASDS,MAAAA,MAAM,EAAE;AATP,KArBE,EAgCL;AACEpB,MAAAA,EAAE,EAAE,QADN;AAEEgB,MAAAA,MAAM,EAAE,KAFV;AAGEC,MAAAA,OAAO,EAAE,CAHX;AAIEC,MAAAA,OAAO,EAAE,CAJX;AAKEC,MAAAA,KAAK,EAAE,MALT;AAMEhB,MAAAA,WAAW,EAAE;AAAEC,QAAAA,CAAC,EAAE,GAAL;AAAUC,QAAAA,CAAC,EAAE,GAAb;AAAkBC,QAAAA,KAAK,EAAE,EAAzB;AAA6BC,QAAAA,MAAM,EAAE;AAArC,OANf;AAOEC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,MAAM,EAAE,QAAV;AAAoBC,QAAAA,IAAI,EAAE;AAA1B,OAPV;AAQEC,MAAAA,IAAI,EAAE;AARR,KAhCK;AANT,GAlGS,EAoJT;AACEX,IAAAA,EAAE,EAAE,MADN;AAEEc,IAAAA,QAAQ,EAAE,IAFZ;AAGEX,IAAAA,WAAW,EAAE;AAAEC,MAAAA,CAAC,EAAE,CAAL;AAAQC,MAAAA,CAAC,EAAE,GAAX;AAAgBC,MAAAA,KAAK,EAAE,GAAvB;AAA4BC,MAAAA,MAAM,EAAE;AAApC,KAHf;AAIEC,IAAAA,MAAM,EAAE;AAAEC,MAAAA,MAAM,EAAE,OAAV;AAAmBC,MAAAA,IAAI,EAAE;AAAzB,KAJV;AAKEC,IAAAA,IAAI,EAAE,KALR;AAMEI,IAAAA,KAAK,EAAE,CACL;AACEf,MAAAA,EAAE,EAAE,QADN;AAEEgB,MAAAA,MAAM,EAAE,KAFV;AAGEC,MAAAA,OAAO,EAAE,CAHX;AAIEC,MAAAA,OAAO,EAAE,CAJX;AAKEC,MAAAA,KAAK,EAAE,MALT;AAMEhB,MAAAA,WAAW,EAAE;AAAEC,QAAAA,CAAC,EAAE,EAAL;AAASC,QAAAA,CAAC,EAAE,GAAZ;AAAiBC,QAAAA,KAAK,EAAE,EAAxB;AAA4BC,QAAAA,MAAM,EAAE;AAApC,OANf;AAOEC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,MAAM,EAAE,QAAV;AAAoBC,QAAAA,IAAI,EAAE;AAA1B,OAPV;AAQEC,MAAAA,IAAI,EAAE;AARR,KADK,EAWL;AACEX,MAAAA,EAAE,EAAE,QADN;AAEEgB,MAAAA,MAAM,EAAE,KAFV;AAGEC,MAAAA,OAAO,EAAE,CAHX;AAIEC,MAAAA,OAAO,EAAE,CAJX;AAKEC,MAAAA,KAAK,EAAE,MALT;AAMEhB,MAAAA,WAAW,EAAE;AAAEC,QAAAA,CAAC,EAAE,GAAL;AAAUC,QAAAA,CAAC,EAAE,GAAb;AAAkBC,QAAAA,KAAK,EAAE,EAAzB;AAA6BC,QAAAA,MAAM,EAAE;AAArC,OANf;AAOEC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,MAAM,EAAE,QAAV;AAAoBC,QAAAA,IAAI,EAAE;AAA1B,OAPV;AAQEC,MAAAA,IAAI,EAAE;AARR,KAXK,EAoBF;AACDX,MAAAA,EAAE,EAAE,QADH;AAEDgB,MAAAA,MAAM,EAAE,KAFP;AAGDC,MAAAA,OAAO,EAAE,CAHR;AAIDC,MAAAA,OAAO,EAAE,CAJR;AAKDC,MAAAA,KAAK,EAAE,MALN;AAMDhB,MAAAA,WAAW,EAAE;AAAEC,QAAAA,CAAC,EAAE,GAAL;AAAUC,QAAAA,CAAC,EAAE,GAAb;AAAkBC,QAAAA,KAAK,EAAE,EAAzB;AAA6BC,QAAAA,MAAM,EAAE;AAArC,OANZ;AAODC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,MAAM,EAAE,QAAV;AAAoBC,QAAAA,IAAI,EAAE;AAA1B,OAPP;AAQDC,MAAAA,IAAI,EAAE;AARL,KApBE,EA8BL;AACEX,MAAAA,EAAE,EAAE,QADN;AAEEgB,MAAAA,MAAM,EAAE,KAFV;AAGEC,MAAAA,OAAO,EAAE,CAHX;AAIEC,MAAAA,OAAO,EAAE,CAJX;AAKEC,MAAAA,KAAK,EAAE,MALT;AAMEhB,MAAAA,WAAW,EAAE;AAAEC,QAAAA,CAAC,EAAE,GAAL;AAAUC,QAAAA,CAAC,EAAE,GAAb;AAAkBC,QAAAA,KAAK,EAAE,EAAzB;AAA6BC,QAAAA,MAAM,EAAE;AAArC,OANf;AAOEC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,MAAM,EAAE,QAAV;AAAoBC,QAAAA,IAAI,EAAE;AAA1B,OAPV;AAQEC,MAAAA,IAAI,EAAE;AARR,KA9BK;AANT,GApJS;AAjCY,CAAlB;AAwOP,OAAO,IAAMU,aAAa,GAAG,SAAhBA,aAAgB,CAACC,IAAD;AAAA,SAAW,mBACnCA,IAAI,CAACnB,WAD8B,EAEnCmB,IAAI,CAACd,MAF8B;AAGtCG,IAAAA,IAAI,EAAEW,IAAI,CAACX,IAH2B;AAItCX,IAAAA,EAAE,EAAEsB,IAAI,CAACtB;AAJ6B,KAAX;AAAA,CAAtB;AAOP,OAAO,IAAMuB,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACD,IAAD;AAAA,SAAUA,IAAI,CAACT,SAAL,CAAeW,MAAf,CAAsB,UAACC,GAAD,EAAMC,IAAN,EAAYC,QAAZ,EAAyB;AAC3FF,IAAAA,GAAG,CAACG,aAAJ,CAAkBC,IAAlB,mBACKH,IAAI,CAACvB,WADV,EAEKuB,IAAI,CAAClB,MAFV;AAGEG,MAAAA,IAAI,EAAEe,IAAI,CAACf,IAHb;AAIEX,MAAAA,EAAE,EAAE0B,IAAI,CAAC1B,EAJX;AAKE2B,MAAAA,QAAQ,EAARA;AALF;AAOA,QAAMZ,KAAK,GAAGW,IAAI,CAACX,KAAL,CAAWe,GAAX,CAAe,UAACC,IAAD,EAAOC,WAAP;AAAA,+BACxBD,IAAI,CAAC5B,WADmB,EAExB4B,IAAI,CAACvB,MAFmB;AAG3BG,QAAAA,IAAI,EAAEoB,IAAI,CAACpB,IAHgB;AAI3BX,QAAAA,EAAE,EAAE+B,IAAI,CAAC/B,EAJkB;AAK3B2B,QAAAA,QAAQ,EAARA,QAL2B;AAM3BK,QAAAA,WAAW,EAAXA,WAN2B;AAO3BZ,QAAAA,MAAM,EAAEW,IAAI,CAACX,MAPc;AAQ3BH,QAAAA,OAAO,EAAEc,IAAI,CAACd,OARa;AAS3BC,QAAAA,OAAO,EAAEa,IAAI,CAACb;AATa;AAAA,KAAf,CAAd;AAWAO,IAAAA,GAAG,CAACQ,cAAJ,gCAAyBR,GAAG,CAACQ,cAA7B,sBAAgDlB,KAAhD;AACA,WAAOU,GAAP;AACD,GArB6C,EAqB3C;AAAEG,IAAAA,aAAa,EAAE,EAAjB;AAAqBK,IAAAA,cAAc,EAAE;AAArC,GArB2C,CAAV;AAAA,CAA7B;AAuBP,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACZ,IAAD;AAAA,SAAUA,IAAI,CAACV,SAAL,CAAekB,GAAf,CAAmB,UAACK,GAAD,EAAMH,WAAN;AAAA,6BACxDG,GAAG,CAAChC,WADoD,EAExDgC,GAAG,CAAC3B,MAFoD;AAG3DG,MAAAA,IAAI,EAAEwB,GAAG,CAACxB,IAHiD;AAI3DX,MAAAA,EAAE,EAAEmC,GAAG,CAACnC,EAJmD;AAK3DgC,MAAAA,WAAW,EAAXA;AAL2D;AAAA,GAAnB,CAAV;AAAA,CAAzB;AASP,OAAO,IAAMI,gBAAgB,GAAG,SAAnBA,gBAAmB;AAAA,MAAGhC,CAAH,QAAGA,CAAH;AAAA,MAAMC,CAAN,QAAMA,CAAN;AAAA,MAASC,KAAT,QAASA,KAAT;AAAA,MAAgBC,MAAhB,QAAgBA,MAAhB;AAAA,SAA8B;AAC5DP,IAAAA,EAAE,EAAE,IADwD;AAE5DC,IAAAA,eAAe,EAAE,EAF2C;AAG5DC,IAAAA,GAAG,EAAE,cAHuD;AAI5DC,IAAAA,WAAW,EAAE;AAAEC,MAAAA,CAAC,EAADA,CAAF;AAAKC,MAAAA,CAAC,EAADA,CAAL;AAAQC,MAAAA,KAAK,EAALA,KAAR;AAAeC,MAAAA,MAAM,EAANA;AAAf,KAJ+C;AAK5DC,IAAAA,MAAM,EAAE;AAAEC,MAAAA,MAAM,EAAE,KAAV;AAAiBC,MAAAA,IAAI,EAAE;AAAvB,KALoD;AAM5DC,IAAAA,IAAI,EAAE,OANsD;AAO5DC,IAAAA,SAAS,EAAE,CACT;AACEZ,MAAAA,EAAE,EAAE,MADN;AAEEG,MAAAA,WAAW,EAAE;AAAEC,QAAAA,CAAC,EAAEA,CAAC,GAAG,CAAT;AAAYC,QAAAA,CAAC,EAAEA,CAAC,GAAG,CAAnB;AAAsBC,QAAAA,KAAK,EAAEA,KAAK,GAAG,EAArC;AAAyCC,QAAAA,MAAM,EAAEA,MAAM,GAAG;AAA1D,OAFf;AAGEC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,MAAM,EAAE,MAAV;AAAkBC,QAAAA,IAAI,EAAE;AAAxB,OAHV;AAIEC,MAAAA,IAAI,EAAE;AAJR,KADS,CAPiD;AAe5DE,IAAAA,SAAS,EAAE,CACT;AACEb,MAAAA,EAAE,EAAE,MADN;AAEEc,MAAAA,QAAQ,EAAE,IAFZ;AAGEX,MAAAA,WAAW,EAAE;AAAEC,QAAAA,CAAC,EAAEA,CAAC,GAAG,CAAT;AAAYC,QAAAA,CAAC,EAAEA,CAAC,GAAG,CAAnB;AAAsBC,QAAAA,KAAK,EAAEA,KAAK,GAAG,EAArC;AAAyCC,QAAAA,MAAM,EAAEA,MAAM,GAAG;AAA1D,OAHf;AAIEC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,MAAM,EAAE,OAAV;AAAmBC,QAAAA,IAAI,EAAE;AAAzB,OAJV;AAKEC,MAAAA,IAAI,EAAE,KALR;AAMEI,MAAAA,KAAK,EAAE,CACL;AACEf,QAAAA,EAAE,EAAE,QADN;AAEEgB,QAAAA,MAAM,EAAE,KAFV;AAGEC,QAAAA,OAAO,EAAE,CAHX;AAIEC,QAAAA,OAAO,EAAE,CAJX;AAKEC,QAAAA,KAAK,EAAE,MALT;AAMEhB,QAAAA,WAAW,EAAE;AAAEC,UAAAA,CAAC,EAAEA,CAAC,GAAG,CAAT;AAAYC,UAAAA,CAAC,EAAEA,CAAC,GAAG,CAAnB;AAAsBC,UAAAA,KAAK,EAAEA,KAAK,GAAG,EAArC;AAAyCC,UAAAA,MAAM,EAAEA,MAAM,GAAG;AAA1D,SANf;AAOEC,QAAAA,MAAM,EAAE;AAAEC,UAAAA,MAAM,EAAE,QAAV;AAAoBC,UAAAA,IAAI,EAAE;AAA1B,SAPV;AAQEC,QAAAA,IAAI,EAAE;AARR,OADK;AANT,KADS;AAfiD,GAA9B;AAAA,CAAzB;AAsCP,OAAO,IAAM0B,mBAAmB,GAAG,SAAtBA,mBAAsB;AAAA,uBAAGrC,EAAH;AAAA,MAAGA,EAAH,yBAAQ,GAAR;AAAA,6BAAac,QAAb;AAAA,MAAaA,QAAb,+BAAwB,KAAxB;AAAA,MAA+BwB,KAA/B,SAA+BA,KAA/B;AAAA,2BAAsC9B,MAAtC;AAAA,MAAsCA,MAAtC,6BAA+C,EAA/C;AAAA,MAAmDO,KAAnD,SAAmDA,KAAnD;AAAA,SAAgE;AACjGf,IAAAA,EAAE,EAAEA,EAD6F;AAEjGc,IAAAA,QAAQ,EAAEA,QAFuF;AAGjGX,IAAAA,WAAW,EAAE;AAAEC,MAAAA,CAAC,EAAEkC,KAAK,CAAClC,CAAX;AAAcC,MAAAA,CAAC,EAAEiC,KAAK,CAACjC,CAAvB;AAA0BC,MAAAA,KAAK,EAAEgC,KAAK,CAAChC,KAAvC;AAA8CC,MAAAA,MAAM,EAAE+B,KAAK,CAAC/B;AAA5D,KAHoF;AAIjGC,IAAAA,MAAM;AAAIC,MAAAA,MAAM,EAAE,OAAZ;AAAqBC,MAAAA,IAAI,EAAE;AAA3B,OAA6CF,MAA7C,CAJ2F;AAKjGG,IAAAA,IAAI,EAAE,KAL2F;AAMjGI,IAAAA,KAAK,EAAE,CACL;AACEf,MAAAA,EAAE,EAAE,QADN;AAEEgB,MAAAA,MAAM,EAAE,KAFV;AAGEC,MAAAA,OAAO,EAAE,CAHX;AAIEC,MAAAA,OAAO,EAAE,CAJX;AAKEC,MAAAA,KAAK,EAAE,MALT;AAMEhB,MAAAA,WAAW,EAAE;AAAEC,QAAAA,CAAC,EAAE,CAAL;AAAQC,QAAAA,CAAC,EAAE,CAAX;AAAcC,QAAAA,KAAK,EAAE,EAArB;AAAyBC,QAAAA,MAAM,EAAE;AAAjC,OANf;AAOEC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,MAAM,EAAE,QAAV;AAAoBC,QAAAA,IAAI,EAAE;AAA1B,OAPV;AAQEC,MAAAA,IAAI,EAAE;AARR,KADK;AAN0F,GAAhE;AAAA,CAA5B","sourcesContent":["export const tableData = {\n  id: 't1',\n  confidenceScore: 50,\n  tag: 'Bank details',\n  coordinates: { x: 0, y: 0, width: 380, height: 190 },\n  styles: { stroke: 'red', fill: 'transparent' },\n  type: 'table',\n  tableCols: [\n    {\n      id: 'col1',\n      coordinates: { x: 5, y: 5, width: 90, height: 180 },\n      styles: { stroke: 'blue', fill: 'transparent' },\n      type: 'col',\n    },\n    {\n      id: 'col2',\n      coordinates: { x: 105, y: 5, width: 90, height: 180 },\n      styles: { stroke: 'blue', fill: 'transparent' },\n      type: 'col',\n    },\n    {\n      id: 'col3',\n      coordinates: { x: 205, y: 5, width: 90, height: 180 },\n      styles: { stroke: 'blue', fill: 'transparent' },\n      type: 'col',\n    },\n    {\n      id: 'col4',\n      coordinates: { x: 305, y: 5, width: 90, height: 180 },\n      styles: { stroke: 'blue', fill: 'transparent' },\n      type: 'col',\n    },\n  ],\n  tableRows: [\n    {\n      id: 'row1',\n      isHeader: true,\n      coordinates: { x: 5, y: 5, width: 365, height: 45 },\n      styles: { stroke: 'green', fill: 'transparent' },\n      type: 'row',\n      cells: [\n        {\n          id: 'cell11',\n          isNull: false,\n          colSpan: 1,\n          rowSpan: 1,\n          value: 'c-11',\n          coordinates: { x: 10, y: 10, width: 85, height: 35 },\n          styles: { stroke: 'yellow', fill: '#ccc' },\n          type: 'cell',\n        },\n        {\n          id: 'cell12',\n          isNull: false,\n          colSpan: 1,\n          rowSpan: 1,\n          value: 'c-12',\n          coordinates: { x: 100, y: 10, width: 85, height: 35 },\n          styles: { stroke: 'yellow', fill: '#ccc' },\n          type: 'cell',\n        }, {\n          id: 'cell13',\n          isNull: false,\n          colSpan: 1,\n          rowSpan: 1,\n          value: 'c-11',\n          coordinates: { x: 190, y: 10, width: 85, height: 35 },\n          styles: { stroke: 'yellow', fill: '#ccc' },\n          type: 'cell',\n        }, {\n          id: 'cell14',\n          isNull: false,\n          colSpan: 1,\n          rowSpan: 1,\n          value: 'c-12',\n          coordinates: { x: 280, y: 10, width: 85, height: 35 },\n          styles: { stroke: 'yellow', fill: '#ccc' },\n          type: 'cell',\n        },\n      ],\n    },\n    {\n      id: 'row2',\n      isHeader: true,\n      coordinates: { x: 5, y: 55, width: 365, height: 45 },\n      styles: { stroke: 'green', fill: 'transparent' },\n      type: 'row',\n      cells: [\n        {\n          id: 'cell21',\n          isNull: false,\n          colSpan: 1,\n          rowSpan: 1,\n          value: 'c-21',\n          coordinates: { x: 10, y: 55, width: 85, height: 35 },\n          styles: { stroke: 'yellow', fill: '#ccc' },\n          type: 'cell',\n        },\n        {\n          id: 'cell22',\n          isNull: false,\n          colSpan: 2,\n          rowSpan: 2,\n          value: 'c-22',\n          coordinates: { x: 100, y: 55, width: 85, height: 35 },\n          styles: { stroke: 'yellow', fill: '#ccc' },\n          type: 'cell',\n          merged: true,\n        }, {\n          id: 'cell23',\n          isNull: false,\n          colSpan: 1,\n          rowSpan: 1,\n          value: 'c-21',\n          coordinates: { x: 190, y: 55, width: 85, height: 35 },\n          styles: { stroke: 'yellow', fill: '#ccc' },\n          type: 'cell',\n          merged: true,\n        },\n        {\n          id: 'cell24',\n          isNull: false,\n          colSpan: 1,\n          rowSpan: 1,\n          value: 'c-22',\n          coordinates: { x: 280, y: 55, width: 85, height: 35 },\n          styles: { stroke: 'yellow', fill: '#ccc' },\n          type: 'cell',\n        },\n      ],\n    },\n    {\n      id: 'row3',\n      isHeader: true,\n      coordinates: { x: 5, y: 105, width: 365, height: 45 },\n      styles: { stroke: 'green', fill: 'transparent' },\n      type: 'row',\n      cells: [\n        {\n          id: 'cell31',\n          isNull: false,\n          colSpan: 1,\n          rowSpan: 1,\n          value: 'c-21',\n          coordinates: { x: 10, y: 100, width: 85, height: 35 },\n          styles: { stroke: 'yellow', fill: '#ccc' },\n          type: 'cell',\n        },\n        {\n          id: 'cell32',\n          isNull: false,\n          colSpan: 1,\n          rowSpan: 1,\n          value: 'c-22',\n          coordinates: { x: 100, y: 100, width: 85, height: 35 },\n          styles: { stroke: 'yellow', fill: '#ccc' },\n          type: 'cell',\n          merged: true,\n        }, {\n          id: 'cell33',\n          isNull: false,\n          colSpan: 1,\n          rowSpan: 1,\n          value: 'c-21',\n          coordinates: { x: 190, y: 100, width: 85, height: 35 },\n          styles: { stroke: 'yellow', fill: '#ccc' },\n          type: 'cell',\n          merged: true,\n        },\n        {\n          id: 'cell34',\n          isNull: false,\n          colSpan: 1,\n          rowSpan: 1,\n          value: 'c-22',\n          coordinates: { x: 280, y: 100, width: 85, height: 35 },\n          styles: { stroke: 'yellow', fill: '#ccc' },\n          type: 'cell',\n        },\n      ],\n    },\n    {\n      id: 'row4',\n      isHeader: true,\n      coordinates: { x: 5, y: 155, width: 365, height: 45 },\n      styles: { stroke: 'green', fill: 'transparent' },\n      type: 'row',\n      cells: [\n        {\n          id: 'cell41',\n          isNull: false,\n          colSpan: 1,\n          rowSpan: 1,\n          value: 'c-21',\n          coordinates: { x: 10, y: 145, width: 85, height: 35 },\n          styles: { stroke: 'yellow', fill: '#ccc' },\n          type: 'cell',\n        },\n        {\n          id: 'cell42',\n          isNull: false,\n          colSpan: 1,\n          rowSpan: 1,\n          value: 'c-22',\n          coordinates: { x: 100, y: 145, width: 85, height: 35 },\n          styles: { stroke: 'yellow', fill: '#ccc' },\n          type: 'cell',\n        }, {\n          id: 'cell43',\n          isNull: false,\n          colSpan: 1,\n          rowSpan: 1,\n          value: 'c-21',\n          coordinates: { x: 190, y: 145, width: 85, height: 35 },\n          styles: { stroke: 'yellow', fill: '#ccc' },\n          type: 'cell',\n        },\n        {\n          id: 'cell44',\n          isNull: false,\n          colSpan: 1,\n          rowSpan: 1,\n          value: 'c-22',\n          coordinates: { x: 280, y: 145, width: 85, height: 35 },\n          styles: { stroke: 'yellow', fill: '#ccc' },\n          type: 'cell',\n        },\n      ],\n    },\n  ],\n};\n\nexport const getTableCords = (data) => ([{\n  ...data.coordinates,\n  ...data.styles,\n  type: data.type,\n  id: data.id,\n}]);\n\nexport const getTableRowCellCords = (data) => data.tableRows.reduce((acc, cord, rowIndex) => {\n  acc.tableRowCords.push({\n    ...cord.coordinates,\n    ...cord.styles,\n    type: cord.type,\n    id: cord.id,\n    rowIndex,\n  });\n  const cells = cord.cells.map((cell, columnIndex) => ({\n    ...cell.coordinates,\n    ...cell.styles,\n    type: cell.type,\n    id: cell.id,\n    rowIndex,\n    columnIndex,\n    merged: cell.merged,\n    colSpan: cell.colSpan,\n    rowSpan: cell.rowSpan,\n  }));\n  acc.tableCellCords = [...acc.tableCellCords, ...cells];\n  return acc;\n}, { tableRowCords: [], tableCellCords: [] });\n\nexport const getTableColCords = (data) => data.tableCols.map((col, columnIndex) => ({\n  ...col.coordinates,\n  ...col.styles,\n  type: col.type,\n  id: col.id,\n  columnIndex,\n}));\n\n\nexport const generateNewTable = ({ x, y, width, height }) => ({\n  id: 't1',\n  confidenceScore: 50,\n  tag: 'Bank details',\n  coordinates: { x, y, width, height },\n  styles: { stroke: 'red', fill: 'transparent' },\n  type: 'table',\n  tableCols: [\n    {\n      id: 'col1',\n      coordinates: { x: x + 5, y: y + 5, width: width - 10, height: height - 10 },\n      styles: { stroke: 'blue', fill: 'transparent' },\n      type: 'col',\n    },\n  ],\n  tableRows: [\n    {\n      id: 'row1',\n      isHeader: true,\n      coordinates: { x: x + 5, y: y + 5, width: width - 10, height: height - 10 },\n      styles: { stroke: 'green', fill: 'transparent' },\n      type: 'row',\n      cells: [\n        {\n          id: 'cell11',\n          isNull: false,\n          colSpan: 1,\n          rowSpan: 1,\n          value: 'c-11',\n          coordinates: { x: x + 5, y: y + 5, width: width - 10, height: height - 10 },\n          styles: { stroke: 'yellow', fill: '#ccc' },\n          type: 'cell',\n        },\n      ],\n    },\n  ],\n});\n\nexport const generateNewTableRow = ({ id = 'x', isHeader = false, cords, styles = {}, cells }) => ({\n  id: id,\n  isHeader: isHeader,\n  coordinates: { x: cords.x, y: cords.y, width: cords.width, height: cords.height },\n  styles: { stroke: 'green', fill: 'transparent', ...styles },\n  type: 'row',\n  cells: [\n    {\n      id: 'cell11',\n      isNull: false,\n      colSpan: 1,\n      rowSpan: 1,\n      value: 'c-11',\n      coordinates: { x: 5, y: 5, width: 10, height: 10 },\n      styles: { stroke: 'yellow', fill: '#ccc' },\n      type: 'cell',\n    },\n  ],\n});"]},"metadata":{},"sourceType":"module"}