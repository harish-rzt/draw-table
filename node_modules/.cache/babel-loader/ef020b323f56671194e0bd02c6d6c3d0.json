{"ast":null,"code":"import _toConsumableArray from \"/Users/rzt/Github/draw-table/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Users/rzt/Github/draw-table/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/rzt/Github/draw-table/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/rzt/Github/draw-table/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/rzt/Github/draw-table/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/rzt/Github/draw-table/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/rzt/Github/draw-table/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/rzt/Github/draw-table/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/rzt/Github/draw-table/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Header from './components/Header/Header';\nimport drawRectangles from './components/SvgUtils/drawRectangles';\nimport drawSplitLine from './components/SvgUtils/drawSplitLine';\nimport { splitOrAddRow } from './components/SvgUtils/splitOrAddRow';\nimport { generateNewTable, getTableColCords, getTableCords, getTableRowCellCords, tableData } from './components/SvgUtils/tableData';\n\nvar getRelativeSVGPoints = function getRelativeSVGPoints(e, svgElement) {\n  var pt = svgElement.createSVGPoint();\n  pt.x = e.clientX;\n  pt.y = e.clientY;\n  var hoverCoordinates = pt.matrixTransform(svgElement.getScreenCTM().inverse());\n  return hoverCoordinates;\n};\n\nvar TableAction = {\n  ADD_ROW: 'addRow',\n  ADD_COL: 'addCol'\n};\n\nvar getTableAction = function getTableAction(mode, editEntity, editAction) {\n  if (mode === 'edit' && editEntity === 'row' && editAction === 'split') {\n    return TableAction.ADD_ROW;\n  }\n\n  if (mode === 'edit' && editEntity === 'column' && editAction === 'split') {\n    return TableAction.ADD_COL;\n  }\n};\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      tableData: tableData,\n      mode: 'edit',\n      // view | edit,\n      editEntity: 'row',\n      // 'cell' | 'column' | 'row' | 'table'\n      editAction: 'split',\n      // 'merge' | 'delete' | 'split'\n      selectedItems: new Set([]),\n      splitLineCoordinates: null,\n      splitAxis: 'vertical',\n      // 'horizontal', 'vertical'\n      drawnTable: {}\n    };\n    _this.handleClick = _this.handleClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleMouseMove = _this.handleMouseMove.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleMouseOut = _this.handleMouseOut.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.selectMode = _this.selectMode.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.selectEditEntity = _this.selectEditEntity.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.selectEditAction = _this.selectEditAction.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.selectSplitAxis = _this.selectSplitAxis.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onMouseDraw = _this.onMouseDraw.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.createNextTable = _this.createNextTable.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.drawTableRow = _this.drawTableRow.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.toDrawColumn = _this.toDrawColumn.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"toDrawColumn\",\n    value: function toDrawColumn(e, item) {\n      console.log('toDrawColumn');\n      e.stopPropagation();\n    }\n  }, {\n    key: \"drawTableRow\",\n    value: function drawTableRow(e, item) {\n      e.stopPropagation();\n      var cords = {\n        x: e.nativeEvent.offsetX,\n        y: e.nativeEvent.offsetY\n      };\n      var newRows = splitOrAddRow({\n        cords: cords,\n        item: item,\n        tableRows: this.state.tableData.tableRows\n      });\n      console.log('newRows: ', newRows, this.state.tableData);\n      this.setState({\n        tableData: _objectSpread({}, this.state.tableData, {\n          tableRows: [].concat(_toConsumableArray(this.state.tableData.tableRows), _toConsumableArray(newRows))\n        })\n      }); // this.setState({ tableData: { ...tableData, tableRows: [...newRows] } });\n    }\n  }, {\n    key: \"handleMouseMove\",\n    value: function handleMouseMove(e, item) {\n      var _this2 = this;\n\n      //    console.log('item ', item.id, ' hovered of type: ', item.type, ' for action: ', this.state.editAction, ' data: ', item);\n      var getLineCoordinates = function getLineCoordinates(item, hoverCoordinates, axis) {\n        var getLineCoordinatesByAxis = function getLineCoordinatesByAxis(item, hoverCoordinates, horizontalAxis) {\n          var itemWidth = item.width;\n          var itemHeight = item.height;\n\n          if (item.merged && item.colSpan > 1 && item.rowSpan > 1) {\n            itemWidth = item.mergedWidth;\n            itemHeight = item.mergedHeight;\n          }\n\n          return horizontalAxis ? {\n            x1: item.x,\n            y1: hoverCoordinates.y,\n            x2: item.x + itemWidth,\n            y2: hoverCoordinates.y\n          } : {\n            x1: hoverCoordinates.x,\n            y1: item.y,\n            x2: hoverCoordinates.x,\n            y2: item.y + itemHeight\n          };\n        };\n\n        if (item.type === 'row') {\n          return getLineCoordinatesByAxis(item, hoverCoordinates, true);\n        } else if (item.type === 'col') {\n          return getLineCoordinatesByAxis(item, hoverCoordinates, false);\n        }\n\n        return getLineCoordinatesByAxis(item, hoverCoordinates, _this2.state.splitAxis === 'horizontal');\n      };\n\n      if (this.state.mode !== 'view' && this.state.editAction === 'split') {\n        e.stopPropagation();\n        var pt = this.svgRef.createSVGPoint();\n        pt.x = e.clientX;\n        pt.y = e.clientY;\n        var hoverCoordinates = pt.matrixTransform(this.svgRef.getScreenCTM().inverse());\n        this.setState({\n          splitLineCoordinates: getLineCoordinates(item, hoverCoordinates)\n        }); // console.log({ l });\n        // console.log('item ', item.id, ' hovered of type: ', item.type, ' for action: ', this.state.editAction, e.clientX, e.clientY)\n        // const { selectedItems } = this.state;\n        // this.setState({\n        //   selectedItems: selectedItems.has(item.id) ?\n        //     (this.state.selectedItems.delete(item.id) && this.state.selectedItems) : this.state.selectedItems.add(item.id),\n        // })\n      } else {// highlightTableData();\n        }\n    }\n  }, {\n    key: \"handleClick\",\n    value: function handleClick(e, item) {\n      var _this$state = this.state,\n          mode = _this$state.mode,\n          editEntity = _this$state.editEntity,\n          editAction = _this$state.editAction;\n      var actionType = getTableAction(mode, editEntity, editAction);\n\n      switch (actionType) {\n        case TableAction.ADD_ROW:\n          this.drawTableRow(e, item);\n          break;\n\n        case TableAction.ADD_COL:\n          this.toDrawColumn(e, item);\n          break;\n\n        default:\n          break;\n      }\n    }\n  }, {\n    key: \"handleMouseOut\",\n    value: function handleMouseOut(e, item) {\n      this.setState({\n        splitLineCoordinates: null\n      });\n    }\n  }, {\n    key: \"selectMode\",\n    value: function selectMode(e) {\n      this.setState({\n        mode: e.target.value,\n        selectedItems: new Set([])\n      });\n    }\n  }, {\n    key: \"selectEditEntity\",\n    value: function selectEditEntity(e) {\n      this.setState({\n        editEntity: e.target.value,\n        selectedItems: new Set([])\n      });\n    }\n  }, {\n    key: \"selectEditAction\",\n    value: function selectEditAction(e) {\n      this.setState({\n        editAction: e.target.value,\n        selectedItems: new Set([])\n      });\n    }\n  }, {\n    key: \"selectSplitAxis\",\n    value: function selectSplitAxis(e) {\n      this.setState({\n        splitAxis: e.target.value\n      });\n    }\n  }, {\n    key: \"onMouseDraw\",\n    value: function onMouseDraw(e) {\n      var p = getRelativeSVGPoints(e, this.tableDrawCanvasSvg);\n      console.log('mousemove p:', p);\n      this.setState({\n        drawnTable: _objectSpread({}, this.state.drawnTable, {\n          x2: p.x,\n          y2: p.y\n        })\n      });\n    }\n  }, {\n    key: \"createNextTable\",\n    value: function createNextTable(e) {\n      var getCoordinates = function getCoordinates(_ref) {\n        var x1 = _ref.x1,\n            y1 = _ref.y1,\n            x2 = _ref.x2,\n            y2 = _ref.y2;\n        return {\n          x: Math.min(x1, x2),\n          y: Math.min(y1, y2),\n          width: Math.abs(x2 - x1),\n          height: Math.abs(y2 - y1)\n        };\n      };\n\n      var tableObj = {\n        type: 'table',\n        coordinates: getCoordinates(this.state.drawnTable)\n      };\n      console.log('tableObj: ', tableObj);\n      var newTableData = generateNewTable(tableObj.coordinates);\n      this.setState({\n        tableData: newTableData\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var _this$state2 = this.state,\n          mode = _this$state2.mode,\n          editEntity = _this$state2.editEntity,\n          editAction = _this$state2.editAction,\n          selectedItems = _this$state2.selectedItems,\n          splitLineCoordinates = _this$state2.splitLineCoordinates;\n\n      var applyHiddenClassName = function applyHiddenClassName(entityName) {\n        return mode === 'edit' && editEntity !== entityName ? 'noDisplay' : '';\n      };\n\n      var tableClassNames = applyHiddenClassName('table');\n      var tableRowClassNames = mode === 'view' ? 'noDisplay' : applyHiddenClassName('row');\n      var tableColumnClassNames = mode === 'view' ? 'noDisplay' : applyHiddenClassName('column');\n      var tableCellClassNames = applyHiddenClassName('cell');\n      var showSplitAxisDropDown = mode === 'edit' && (editAction === 'split' || editAction === 'split') && (editEntity === 'table' || editEntity === 'cell');\n      var tableRowCellCords = getTableRowCellCords(this.state.tableData);\n      var entityCoordinatesList = [{\n        coordinates: getTableCords(this.state.tableData),\n        className: tableClassNames,\n        type: 'table'\n      }, {\n        coordinates: tableRowCellCords.tableRowCords,\n        type: 'row',\n        className: tableRowClassNames\n      }, {\n        coordinates: getTableColCords(this.state.tableData),\n        type: 'col',\n        className: tableColumnClassNames\n      }, {\n        coordinates: tableRowCellCords.tableCellCords,\n        type: 'cell',\n        className: tableCellClassNames\n      }];\n      var tableFigure = entityCoordinatesList.map(function (entityCoordinates) {\n        return drawRectangles(entityCoordinates.coordinates, entityCoordinates.className, selectedItems, _this3.handleClick, _this3.handleMouseMove, _this3.handleMouseOut);\n      }); //    console.log('width: ', this.state.drawnTable.x2 - this.state.drawnTable.x1);\n      //    console.log('height: ', this.state.drawnTable.y2 - this.state.drawnTable.y1);\n\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 262\n        },\n        __self: this\n      }, React.createElement(Header, {\n        modeValue: this.state.mode,\n        onModeChange: this.selectMode,\n        editValue: this.state.editEntity,\n        onEditChange: this.selectEditEntity,\n        actionValue: this.state.editAction,\n        onActionChange: this.selectEditAction,\n        showAxisInput: showSplitAxisDropDown,\n        axisValue: this.state.splitAxis,\n        onAxisChange: this.selectSplitAxis,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 263\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"App-content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 274\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"presentation-area\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 275\n        },\n        __self: this\n      }, React.createElement(\"svg\", {\n        ref: function ref(r) {\n          return _this3.svgRef = r;\n        },\n        width: \"100%\",\n        height: \"100%\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276\n        },\n        __self: this\n      }, tableFigure, splitLineCoordinates && drawSplitLine(splitLineCoordinates))), React.createElement(\"div\", {\n        className: \"canvas-area\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 284\n        },\n        __self: this\n      }, React.createElement(\"svg\", {\n        ref: function ref(r) {\n          return _this3.tableDrawCanvasSvg = r;\n        },\n        width: \"100%\",\n        height: \"100%\",\n        style: {\n          background: 'white',\n          cursor: 'crosshair'\n        },\n        onMouseDown: function onMouseDown(e) {\n          var p = getRelativeSVGPoints(e, _this3.tableDrawCanvasSvg);\n          console.log({\n            p: p\n          });\n\n          _this3.setState({\n            drawnTable: {\n              x1: p.x,\n              y1: p.y\n            }\n          });\n\n          _this3.tableDrawCanvasSvg.addEventListener('mousemove', _this3.onMouseDraw);\n        },\n        onMouseUp: function onMouseUp() {\n          _this3.tableDrawCanvasSvg.removeEventListener('mousemove', _this3.onMouseDraw);\n        } // onMouseDown={() => {\n        //   const nextTableIndex = this.state.drawnTables.count();\n        //\n        // }}\n        // onMouseUp={}\n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 285\n        },\n        __self: this\n      }, this.state.drawnTable.x1 && this.state.drawnTable.x2 && React.createElement(\"rect\", {\n        x: Math.min(this.state.drawnTable.x1, this.state.drawnTable.x2),\n        y: Math.min(this.state.drawnTable.y1, this.state.drawnTable.y2),\n        width: Math.abs(this.state.drawnTable.x2 - this.state.drawnTable.x1),\n        height: Math.abs(this.state.drawnTable.y2 - this.state.drawnTable.y1),\n        fill: \"transparent\",\n        stroke: \"black\" // className={className}\n        // onClick={onClick}\n        // onMouseMove={onMouseMove}\n        // onMouseOut={onMouseOut}\n        // fillOpacity={fillOpacity}\n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 313\n        },\n        __self: this\n      })))), React.createElement(\"div\", {\n        className: \"footer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 330\n        },\n        __self: this\n      }, this.state.drawnTable.x1 && this.state.drawnTable.x2 && React.createElement(\"button\", {\n        className: \"footer-btn\",\n        onClick: this.createNextTable,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 332\n        },\n        __self: this\n      }, \"Create Table\")));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/rzt/Github/draw-table/src/App.js"],"names":["React","Component","Header","drawRectangles","drawSplitLine","splitOrAddRow","generateNewTable","getTableColCords","getTableCords","getTableRowCellCords","tableData","getRelativeSVGPoints","e","svgElement","pt","createSVGPoint","x","clientX","y","clientY","hoverCoordinates","matrixTransform","getScreenCTM","inverse","TableAction","ADD_ROW","ADD_COL","getTableAction","mode","editEntity","editAction","App","props","state","selectedItems","Set","splitLineCoordinates","splitAxis","drawnTable","handleClick","bind","handleMouseMove","handleMouseOut","selectMode","selectEditEntity","selectEditAction","selectSplitAxis","onMouseDraw","createNextTable","drawTableRow","toDrawColumn","item","console","log","stopPropagation","cords","nativeEvent","offsetX","offsetY","newRows","tableRows","setState","getLineCoordinates","axis","getLineCoordinatesByAxis","horizontalAxis","itemWidth","width","itemHeight","height","merged","colSpan","rowSpan","mergedWidth","mergedHeight","x1","y1","x2","y2","type","svgRef","actionType","target","value","p","tableDrawCanvasSvg","getCoordinates","Math","min","abs","tableObj","coordinates","newTableData","applyHiddenClassName","entityName","tableClassNames","tableRowClassNames","tableColumnClassNames","tableCellClassNames","showSplitAxisDropDown","tableRowCellCords","entityCoordinatesList","className","tableRowCords","tableCellCords","tableFigure","map","entityCoordinates","r","background","cursor","addEventListener","removeEventListener"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport Header from './components/Header/Header';\nimport drawRectangles from './components/SvgUtils/drawRectangles';\nimport drawSplitLine from './components/SvgUtils/drawSplitLine';\nimport { splitOrAddRow } from './components/SvgUtils/splitOrAddRow';\nimport {\n  generateNewTable,\n  getTableColCords,\n  getTableCords,\n  getTableRowCellCords,\n  tableData,\n} from './components/SvgUtils/tableData';\n\nconst getRelativeSVGPoints = (e, svgElement) => {\n  let pt = svgElement.createSVGPoint();\n  pt.x = e.clientX;\n  pt.y = e.clientY;\n  const hoverCoordinates = pt.matrixTransform(svgElement.getScreenCTM().inverse());\n  return hoverCoordinates;\n};\n\nconst TableAction = {\n  ADD_ROW: 'addRow',\n  ADD_COL: 'addCol',\n};\n\nconst getTableAction = (mode, editEntity, editAction) => {\n  if (mode === 'edit' && editEntity === 'row' && editAction === 'split') {\n    return TableAction.ADD_ROW;\n  }\n  if (mode === 'edit' && editEntity === 'column' && editAction === 'split') {\n    return TableAction.ADD_COL;\n  }\n};\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      tableData: tableData,\n      mode: 'edit', // view | edit,\n      editEntity: 'row', // 'cell' | 'column' | 'row' | 'table'\n      editAction: 'split', // 'merge' | 'delete' | 'split'\n      selectedItems: new Set([]),\n      splitLineCoordinates: null,\n      splitAxis: 'vertical', // 'horizontal', 'vertical'\n      drawnTable: {},\n    };\n    this.handleClick = this.handleClick.bind(this);\n    this.handleMouseMove = this.handleMouseMove.bind(this);\n    this.handleMouseOut = this.handleMouseOut.bind(this);\n    this.selectMode = this.selectMode.bind(this);\n    this.selectEditEntity = this.selectEditEntity.bind(this);\n    this.selectEditAction = this.selectEditAction.bind(this);\n    this.selectSplitAxis = this.selectSplitAxis.bind(this);\n    this.onMouseDraw = this.onMouseDraw.bind(this);\n    this.createNextTable = this.createNextTable.bind(this);\n    this.drawTableRow = this.drawTableRow.bind(this);\n    this.toDrawColumn = this.toDrawColumn.bind(this);\n  }\n\n  toDrawColumn(e, item) {\n    console.log('toDrawColumn');\n    e.stopPropagation();\n  }\n\n  drawTableRow(e, item) {\n    e.stopPropagation();\n    const cords = { x: e.nativeEvent.offsetX, y: e.nativeEvent.offsetY };\n    const newRows = splitOrAddRow({ cords, item, tableRows: this.state.tableData.tableRows });\n    console.log('newRows: ', newRows, this.state.tableData);\n    this.setState({\n      tableData: {\n        ...this.state.tableData,\n        tableRows: [...this.state.tableData.tableRows, ...newRows],\n      },\n    });\n    // this.setState({ tableData: { ...tableData, tableRows: [...newRows] } });\n  }\n\n  handleMouseMove(e, item) {\n//    console.log('item ', item.id, ' hovered of type: ', item.type, ' for action: ', this.state.editAction, ' data: ', item);\n    const getLineCoordinates = (item, hoverCoordinates, axis) => {\n      const getLineCoordinatesByAxis = (item, hoverCoordinates, horizontalAxis) => {\n        let itemWidth = item.width;\n        let itemHeight = item.height;\n        if (item.merged && (item.colSpan > 1 && item.rowSpan > 1)) {\n          itemWidth = item.mergedWidth;\n          itemHeight = item.mergedHeight;\n        }\n        return (\n          horizontalAxis ? ({\n            x1: item.x,\n            y1: hoverCoordinates.y,\n            x2: item.x + itemWidth,\n            y2: hoverCoordinates.y,\n          }) : ({\n            x1: hoverCoordinates.x,\n            y1: item.y,\n            x2: hoverCoordinates.x,\n            y2: item.y + itemHeight,\n          })\n        );\n      };\n      if (item.type === 'row') {\n        return getLineCoordinatesByAxis(item, hoverCoordinates, true);\n      } else if (item.type === 'col') {\n        return getLineCoordinatesByAxis(item, hoverCoordinates, false);\n      }\n      return getLineCoordinatesByAxis(item, hoverCoordinates, this.state.splitAxis === 'horizontal');\n    };\n\n    if (this.state.mode !== 'view' && this.state.editAction === 'split') {\n      e.stopPropagation();\n      let pt = this.svgRef.createSVGPoint();\n      pt.x = e.clientX;\n      pt.y = e.clientY;\n      const hoverCoordinates = pt.matrixTransform(this.svgRef.getScreenCTM().inverse());\n      this.setState({\n        splitLineCoordinates: getLineCoordinates(item, hoverCoordinates),\n      });\n      // console.log({ l });\n      // console.log('item ', item.id, ' hovered of type: ', item.type, ' for action: ', this.state.editAction, e.clientX, e.clientY)\n      // const { selectedItems } = this.state;\n      // this.setState({\n      //   selectedItems: selectedItems.has(item.id) ?\n      //     (this.state.selectedItems.delete(item.id) && this.state.selectedItems) : this.state.selectedItems.add(item.id),\n      // })\n    } else {\n      // highlightTableData();\n    }\n  }\n\n  handleClick(e, item) {\n    const { mode, editEntity, editAction } = this.state;\n    const actionType = getTableAction(mode, editEntity, editAction);\n\n    switch (actionType) {\n      case TableAction.ADD_ROW :\n        this.drawTableRow(e, item);\n        break;\n      case TableAction.ADD_COL :\n        this.toDrawColumn(e, item);\n        break;\n      default:\n        break;\n    }\n  }\n\n  handleMouseOut(e, item) {\n    this.setState({ splitLineCoordinates: null });\n  }\n\n  selectMode(e) {\n    this.setState({\n      mode: e.target.value,\n      selectedItems: new Set([]),\n    });\n  }\n\n  selectEditEntity(e) {\n    this.setState({\n      editEntity: e.target.value,\n      selectedItems: new Set([]),\n    });\n  }\n\n  selectEditAction(e) {\n    this.setState({\n      editAction: e.target.value,\n      selectedItems: new Set([]),\n    });\n  }\n\n  selectSplitAxis(e) {\n    this.setState({\n      splitAxis: e.target.value,\n    });\n  }\n\n  onMouseDraw(e) {\n    const p = getRelativeSVGPoints(e, this.tableDrawCanvasSvg);\n    console.log('mousemove p:', p);\n    this.setState({\n      drawnTable: {\n        ...this.state.drawnTable,\n        x2: p.x,\n        y2: p.y,\n      },\n    });\n  }\n\n  createNextTable(e) {\n    const getCoordinates = ({ x1, y1, x2, y2 }) => ({\n      x: Math.min(x1, x2),\n      y: Math.min(y1, y2),\n      width: Math.abs(x2 - x1),\n      height: Math.abs(y2 - y1),\n    });\n    const tableObj = {\n      type: 'table',\n      coordinates: getCoordinates(this.state.drawnTable),\n    };\n    console.log('tableObj: ', tableObj);\n    const newTableData = generateNewTable(tableObj.coordinates);\n    this.setState({ tableData: newTableData });\n  }\n\n  render() {\n    const { mode, editEntity, editAction, selectedItems, splitLineCoordinates } = this.state;\n    const applyHiddenClassName = (entityName) => mode === 'edit' && editEntity !== entityName ? 'noDisplay' : '';\n\n    const tableClassNames = applyHiddenClassName('table');\n    const tableRowClassNames = mode === 'view' ? 'noDisplay' : applyHiddenClassName('row');\n    const tableColumnClassNames = mode === 'view' ? 'noDisplay' : applyHiddenClassName('column');\n    const tableCellClassNames = applyHiddenClassName('cell');\n    const showSplitAxisDropDown = (mode === 'edit')\n      && (editAction === 'split' || editAction === 'split')\n      && (editEntity === 'table' || editEntity === 'cell');\n\n    const tableRowCellCords = getTableRowCellCords(this.state.tableData);\n\n    const entityCoordinatesList = [\n      {\n        coordinates: getTableCords(this.state.tableData),\n        className: tableClassNames,\n        type: 'table',\n      },\n      {\n        coordinates: tableRowCellCords.tableRowCords,\n        type: 'row',\n        className: tableRowClassNames,\n\n      },\n      {\n        coordinates: getTableColCords(this.state.tableData),\n        type: 'col',\n        className: tableColumnClassNames,\n      },\n      {\n        coordinates: tableRowCellCords.tableCellCords,\n        type: 'cell',\n        className: tableCellClassNames,\n      },\n    ];\n\n    const tableFigure = entityCoordinatesList.map(entityCoordinates => drawRectangles(\n      entityCoordinates.coordinates,\n      entityCoordinates.className,\n      selectedItems,\n      this.handleClick,\n      this.handleMouseMove,\n      this.handleMouseOut,\n    ));\n\n//    console.log('width: ', this.state.drawnTable.x2 - this.state.drawnTable.x1);\n//    console.log('height: ', this.state.drawnTable.y2 - this.state.drawnTable.y1);\n\n    return (\n      <div className=\"App\">\n        <Header\n          modeValue={this.state.mode}\n          onModeChange={this.selectMode}\n          editValue={this.state.editEntity}\n          onEditChange={this.selectEditEntity}\n          actionValue={this.state.editAction}\n          onActionChange={this.selectEditAction}\n          showAxisInput={showSplitAxisDropDown}\n          axisValue={this.state.splitAxis}\n          onAxisChange={this.selectSplitAxis}\n        />\n        <div className=\"App-content\">\n          <div className=\"presentation-area\">\n            <svg\n              ref={r => this.svgRef = r}\n              width=\"100%\"\n              height=\"100%\">\n              {tableFigure}\n              {splitLineCoordinates && drawSplitLine(splitLineCoordinates)}\n            </svg>\n          </div>\n          <div className=\"canvas-area\">\n            <svg\n              ref={r => this.tableDrawCanvasSvg = r}\n              width=\"100%\"\n              height=\"100%\"\n              style={{ background: 'white', cursor: 'crosshair' }}\n              onMouseDown={(e) => {\n                const p = getRelativeSVGPoints(e, this.tableDrawCanvasSvg);\n                console.log({ p });\n                this.setState({\n                  drawnTable: {\n                    x1: p.x,\n                    y1: p.y,\n                  },\n                });\n                this.tableDrawCanvasSvg.addEventListener('mousemove', this.onMouseDraw);\n              }}\n              onMouseUp={() => {\n                this.tableDrawCanvasSvg.removeEventListener('mousemove', this.onMouseDraw);\n              }}\n              // onMouseDown={() => {\n              //   const nextTableIndex = this.state.drawnTables.count();\n              //\n              // }}\n              // onMouseUp={}\n            >\n              {\n                this.state.drawnTable.x1 &&\n                this.state.drawnTable.x2 &&\n                <rect\n                  x={Math.min(this.state.drawnTable.x1, this.state.drawnTable.x2)}\n                  y={Math.min(this.state.drawnTable.y1, this.state.drawnTable.y2)}\n                  width={Math.abs(this.state.drawnTable.x2 - this.state.drawnTable.x1)}\n                  height={Math.abs(this.state.drawnTable.y2 - this.state.drawnTable.y1)}\n                  fill=\"transparent\"\n                  stroke=\"black\"\n                  // className={className}\n                  // onClick={onClick}\n                  // onMouseMove={onMouseMove}\n                  // onMouseOut={onMouseOut}\n                  // fillOpacity={fillOpacity}\n                />\n              }\n            </svg>\n          </div>\n        </div>\n        <div className=\"footer\">\n          {this.state.drawnTable.x1 && this.state.drawnTable.x2 &&\n          <button className=\"footer-btn\" onClick={this.createNextTable}>\n            Create Table\n          </button>}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}