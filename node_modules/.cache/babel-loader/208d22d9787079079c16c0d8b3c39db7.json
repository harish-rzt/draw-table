{"ast":null,"code":"import _objectSpread from \"/Users/rzt/Github/draw-table/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/rzt/Github/draw-table/src/components/SvgUtils/drawRectangles.js\";\nimport React from 'react';\nimport classNames from 'classnames';\nimport { tableData } from './../SvgUtils/tableData';\nimport Rectangle from './../Rectangle/Rectangle';\n\nvar drawRectangles = function drawRectangles(rectangles, customClassName, selectedItems, _onClick, _onMouseMove, _onMouseOut) {\n  return rectangles.map(function (data, index) {\n    var x = data.x,\n        y = data.y,\n        width = data.width,\n        height = data.height,\n        fill = data.fill,\n        stroke = data.stroke,\n        className = data.className,\n        id = data.id,\n        type = data.type,\n        merged = data.merged,\n        _data$colSpan = data.colSpan,\n        colSpan = _data$colSpan === void 0 ? 1 : _data$colSpan,\n        _data$rowSpan = data.rowSpan,\n        rowSpan = _data$rowSpan === void 0 ? 1 : _data$rowSpan,\n        columnIndex = data.columnIndex,\n        rowIndex = data.rowIndex;\n\n    if (type === 'cell') {\n      if (merged) {\n        if (colSpan > 1 || rowSpan > 1) {\n          var mergedWidth = 0;\n          var mergedHeight = 0;\n\n          for (var i = columnIndex; i < columnIndex + colSpan; i++) {\n            mergedWidth += tableData.tableRows[rowIndex].cells[i].coordinates.width;\n          }\n\n          for (var _i = rowIndex; _i < rowIndex + rowSpan; _i++) {\n            mergedHeight += tableData.tableRows[_i].cells[columnIndex].coordinates.height;\n          }\n\n          var nextData = _objectSpread({}, data, {\n            mergedHeight: mergedHeight,\n            mergedWidth: mergedWidth\n          });\n\n          return React.createElement(Rectangle, {\n            key: \"id \".concat(id, \" - \").concat(index),\n            id: id,\n            x: x,\n            y: y,\n            width: mergedWidth,\n            height: mergedHeight,\n            stroke: stroke,\n            fill: selectedItems.has(id) ? \"blue\" : \"transparent\",\n            className: classNames(customClassName, className),\n            onClick: function onClick(e) {\n              console.log('e: ', e);\n\n              _onClick(e, nextData);\n            },\n            onMouseMove: function onMouseMove(e) {\n              _onMouseMove(e, nextData);\n            },\n            onMouseOut: function onMouseOut(e) {\n              _onMouseOut(e, nextData);\n            },\n            selectedItems: selectedItems,\n            fillOpacity: selectedItems.has(id) ? .2 : 1,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 33\n            },\n            __self: this\n          });\n        }\n\n        return null;\n      }\n    }\n\n    return React.createElement(Rectangle, {\n      key: \"id \".concat(id, \" - \").concat(index),\n      id: id,\n      x: x,\n      y: y,\n      width: width,\n      height: height,\n      stroke: stroke,\n      fill: selectedItems.has(id) ? \"blue\" : \"transparent\",\n      className: classNames(customClassName, className),\n      onClick: function onClick(e) {\n        console.log('e: ', e);\n\n        _onClick(e, data);\n      },\n      onMouseMove: function onMouseMove(e) {\n        _onMouseMove(e, data);\n      },\n      onMouseOut: function onMouseOut(e) {\n        _onMouseOut(e, data);\n      },\n      selectedItems: selectedItems,\n      fillOpacity: selectedItems.has(id) ? .2 : 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    });\n  });\n};\n\nexport default drawRectangles;","map":{"version":3,"sources":["/Users/rzt/Github/draw-table/src/components/SvgUtils/drawRectangles.js"],"names":["React","classNames","tableData","Rectangle","drawRectangles","rectangles","customClassName","selectedItems","onClick","onMouseMove","onMouseOut","map","data","index","x","y","width","height","fill","stroke","className","id","type","merged","colSpan","rowSpan","columnIndex","rowIndex","mergedWidth","mergedHeight","i","tableRows","cells","coordinates","nextData","has","e","console","log"],"mappings":"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","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { tableData } from './../SvgUtils/tableData';\nimport Rectangle from './../Rectangle/Rectangle';\n\nconst drawRectangles = (\n  rectangles, customClassName, selectedItems, onClick,\n  onMouseMove,\n  onMouseOut,\n) => rectangles\n  .map((data, index) => {\n    const {\n      x, y, width, height, fill, stroke, className, id, type, merged, colSpan=1, rowSpan=1,\n      columnIndex, rowIndex\n    } = data;\n    if (type === 'cell') {\n      if (merged) {\n        if (colSpan > 1 || rowSpan > 1) {\n          let mergedWidth = 0;\n          let mergedHeight = 0;\n          for (let i = columnIndex; i < columnIndex + colSpan; i++) {\n            mergedWidth += tableData.tableRows[rowIndex].cells[i].coordinates.width;\n          }\n          for (let i = rowIndex; i < rowIndex + rowSpan; i++) {\n            mergedHeight += tableData.tableRows[i].cells[columnIndex].coordinates.height;\n          }\n          const nextData = {\n            ...data,\n            mergedHeight,\n            mergedWidth,\n          };\n          return (\n            <Rectangle\n              key={`id ${id} - ${index}`}\n              id={id}\n              x={x}\n              y={y}\n              width={mergedWidth}\n              height={mergedHeight}\n              stroke={stroke}\n              fill={selectedItems.has(id) ? \"blue\" : \"transparent\"}\n              className={classNames(customClassName, className)}\n              onClick={e => { console.log('e: ',e); onClick(e, nextData);}}\n              onMouseMove={e => {onMouseMove(e, nextData);}}\n              onMouseOut={e => {onMouseOut(e, nextData);}}\n              selectedItems={selectedItems}\n              fillOpacity={selectedItems.has(id) ? .2 : 1}\n            />\n          );\n        }\n        return null;\n      }\n    }\n    return (\n      <Rectangle\n        key={`id ${id} - ${index}`}\n        id={id}\n        x={x}\n        y={y}\n        width={width}\n        height={height}\n        stroke={stroke}\n        fill={selectedItems.has(id) ? \"blue\" : \"transparent\"}\n        className={classNames(customClassName, className)}\n        onClick={e => { console.log('e: ',e); onClick(e, data);}}\n        onMouseMove={e => {onMouseMove(e, data);}}\n        onMouseOut={e => {onMouseOut(e, data);}}\n        selectedItems={selectedItems}\n        fillOpacity={selectedItems.has(id) ? .2 : 1}\n      />\n    )\n  });\n\nexport default drawRectangles;"]},"metadata":{},"sourceType":"module"}