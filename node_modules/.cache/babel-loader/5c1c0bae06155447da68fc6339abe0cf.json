{"ast":null,"code":"import _toConsumableArray from \"/Users/rzt/Github/draw-table/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Users/rzt/Github/draw-table/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { generateNewTableRow } from './../SvgUtils/tableData';\nexport var splitOrAddRow = function splitOrAddRow(data) {\n  var oldRowCords = _objectSpread({}, data.tableRows[data.index].coordinates);\n\n  var oldHeight = data.cords.y - oldRowCords.y;\n  var newY = data.cords.y;\n  var newHeight = oldRowCords.y + oldRowCords.height - data.cords.y;\n  var row1 = generateNewTableRow({\n    id: 'x1',\n    isHeader: false,\n    cords: _objectSpread({}, oldRowCords, {\n      height: oldHeight\n    }),\n    styles: {\n      fill: '#000'\n    }\n  });\n  var row2 = generateNewTableRow({\n    id: 'x2',\n    isHeader: false,\n    cords: _objectSpread({}, oldRowCords, {\n      y: newY,\n      height: newHeight\n    }),\n    styles: {}\n  });\n  var rowsBefore = data.tableRows.slice(0, data.index);\n  var rowsAfter = data.tableRows.slice(data.index + 1, data.tableRows.length);\n  return [].concat(_toConsumableArray(rowsBefore), [row1, row2], _toConsumableArray(rowsAfter));\n};","map":{"version":3,"sources":["/Users/rzt/Github/draw-table/src/components/SvgUtils/splitOrAddRow.js"],"names":["generateNewTableRow","splitOrAddRow","data","oldRowCords","tableRows","index","coordinates","oldHeight","cords","y","newY","newHeight","height","row1","id","isHeader","styles","fill","row2","rowsBefore","slice","rowsAfter","length"],"mappings":";;AAAA,SAASA,mBAAT,QAAoC,yBAApC;AAEA,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,IAAD,EAAU;AACrC,MAAMC,WAAW,qBAAQD,IAAI,CAACE,SAAL,CAAeF,IAAI,CAACG,KAApB,EAA2BC,WAAnC,CAAjB;;AAEA,MAAMC,SAAS,GAAGL,IAAI,CAACM,KAAL,CAAWC,CAAX,GAAeN,WAAW,CAACM,CAA7C;AAEA,MAAMC,IAAI,GAAGR,IAAI,CAACM,KAAL,CAAWC,CAAxB;AACA,MAAME,SAAS,GAAIR,WAAW,CAACM,CAAZ,GAAgBN,WAAW,CAACS,MAA7B,GAAuCV,IAAI,CAACM,KAAL,CAAWC,CAApE;AAEA,MAAMI,IAAI,GAAGb,mBAAmB,CAAC;AAC/Bc,IAAAA,EAAE,EAAE,IAD2B;AAE/BC,IAAAA,QAAQ,EAAE,KAFqB;AAG/BP,IAAAA,KAAK,oBAAOL,WAAP;AAAoBS,MAAAA,MAAM,EAAEL;AAA5B,MAH0B;AAI/BS,IAAAA,MAAM,EAAE;AAAEC,MAAAA,IAAI,EAAE;AAAR;AAJuB,GAAD,CAAhC;AAOA,MAAMC,IAAI,GAAGlB,mBAAmB,CAAC;AAC/Bc,IAAAA,EAAE,EAAE,IAD2B;AAE/BC,IAAAA,QAAQ,EAAE,KAFqB;AAG/BP,IAAAA,KAAK,oBAAOL,WAAP;AAAoBM,MAAAA,CAAC,EAAEC,IAAvB;AAA6BE,MAAAA,MAAM,EAAED;AAArC,MAH0B;AAI/BK,IAAAA,MAAM,EAAE;AAJuB,GAAD,CAAhC;AAOA,MAAMG,UAAU,GAAGjB,IAAI,CAACE,SAAL,CAAegB,KAAf,CAAqB,CAArB,EAAwBlB,IAAI,CAACG,KAA7B,CAAnB;AACA,MAAMgB,SAAS,GAAGnB,IAAI,CAACE,SAAL,CAAegB,KAAf,CAAqBlB,IAAI,CAACG,KAAL,GAAa,CAAlC,EAAqCH,IAAI,CAACE,SAAL,CAAekB,MAApD,CAAlB;AAEA,sCAAWH,UAAX,IAAuBN,IAAvB,EAA6BK,IAA7B,sBAAsCG,SAAtC;AACD,CA1BM","sourcesContent":["import { generateNewTableRow } from './../SvgUtils/tableData';\n\nexport const splitOrAddRow = (data) => {\n  const oldRowCords = { ...data.tableRows[data.index].coordinates };\n\n  const oldHeight = data.cords.y - oldRowCords.y;\n\n  const newY = data.cords.y;\n  const newHeight = (oldRowCords.y + oldRowCords.height) - data.cords.y;\n\n  const row1 = generateNewTableRow({\n    id: 'x1',\n    isHeader: false,\n    cords: { ...oldRowCords, height: oldHeight },\n    styles: { fill: '#000' },\n  });\n\n  const row2 = generateNewTableRow({\n    id: 'x2',\n    isHeader: false,\n    cords: { ...oldRowCords, y: newY, height: newHeight },\n    styles: {},\n  });\n\n  const rowsBefore = data.tableRows.slice(0, data.index);\n  const rowsAfter = data.tableRows.slice(data.index + 1, data.tableRows.length);\n\n  return [...rowsBefore, row1, row2, ...rowsAfter];\n};\n"]},"metadata":{},"sourceType":"module"}